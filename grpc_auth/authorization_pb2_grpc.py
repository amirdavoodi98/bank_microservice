# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from protos import authorization_pb2 as protos_dot_authorization__pb2


class AuthorizationStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.isAdmin = channel.unary_unary(
                '/authorization.Authorization/isAdmin',
                request_serializer=protos_dot_authorization__pb2.AuthorizationRequest.SerializeToString,
                response_deserializer=protos_dot_authorization__pb2.AuthorizationResponse.FromString,
                )
        self.isBankManager = channel.unary_unary(
                '/authorization.Authorization/isBankManager',
                request_serializer=protos_dot_authorization__pb2.AuthorizationRequest.SerializeToString,
                response_deserializer=protos_dot_authorization__pb2.AuthorizationResponse.FromString,
                )
        self.isBranchManager = channel.unary_unary(
                '/authorization.Authorization/isBranchManager',
                request_serializer=protos_dot_authorization__pb2.AuthorizationRequest.SerializeToString,
                response_deserializer=protos_dot_authorization__pb2.AuthorizationResponse.FromString,
                )
        self.isEmployee = channel.unary_unary(
                '/authorization.Authorization/isEmployee',
                request_serializer=protos_dot_authorization__pb2.AuthorizationRequest.SerializeToString,
                response_deserializer=protos_dot_authorization__pb2.AuthorizationResponse.FromString,
                )
        self.isCustomer = channel.unary_unary(
                '/authorization.Authorization/isCustomer',
                request_serializer=protos_dot_authorization__pb2.AuthorizationRequest.SerializeToString,
                response_deserializer=protos_dot_authorization__pb2.AuthorizationResponse.FromString,
                )


class AuthorizationServicer(object):
    """Missing associated documentation comment in .proto file."""

    def isAdmin(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def isBankManager(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def isBranchManager(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def isEmployee(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def isCustomer(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_AuthorizationServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'isAdmin': grpc.unary_unary_rpc_method_handler(
                    servicer.isAdmin,
                    request_deserializer=protos_dot_authorization__pb2.AuthorizationRequest.FromString,
                    response_serializer=protos_dot_authorization__pb2.AuthorizationResponse.SerializeToString,
            ),
            'isBankManager': grpc.unary_unary_rpc_method_handler(
                    servicer.isBankManager,
                    request_deserializer=protos_dot_authorization__pb2.AuthorizationRequest.FromString,
                    response_serializer=protos_dot_authorization__pb2.AuthorizationResponse.SerializeToString,
            ),
            'isBranchManager': grpc.unary_unary_rpc_method_handler(
                    servicer.isBranchManager,
                    request_deserializer=protos_dot_authorization__pb2.AuthorizationRequest.FromString,
                    response_serializer=protos_dot_authorization__pb2.AuthorizationResponse.SerializeToString,
            ),
            'isEmployee': grpc.unary_unary_rpc_method_handler(
                    servicer.isEmployee,
                    request_deserializer=protos_dot_authorization__pb2.AuthorizationRequest.FromString,
                    response_serializer=protos_dot_authorization__pb2.AuthorizationResponse.SerializeToString,
            ),
            'isCustomer': grpc.unary_unary_rpc_method_handler(
                    servicer.isCustomer,
                    request_deserializer=protos_dot_authorization__pb2.AuthorizationRequest.FromString,
                    response_serializer=protos_dot_authorization__pb2.AuthorizationResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'authorization.Authorization', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Authorization(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def isAdmin(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/authorization.Authorization/isAdmin',
            protos_dot_authorization__pb2.AuthorizationRequest.SerializeToString,
            protos_dot_authorization__pb2.AuthorizationResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def isBankManager(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/authorization.Authorization/isBankManager',
            protos_dot_authorization__pb2.AuthorizationRequest.SerializeToString,
            protos_dot_authorization__pb2.AuthorizationResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def isBranchManager(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/authorization.Authorization/isBranchManager',
            protos_dot_authorization__pb2.AuthorizationRequest.SerializeToString,
            protos_dot_authorization__pb2.AuthorizationResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def isEmployee(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/authorization.Authorization/isEmployee',
            protos_dot_authorization__pb2.AuthorizationRequest.SerializeToString,
            protos_dot_authorization__pb2.AuthorizationResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def isCustomer(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/authorization.Authorization/isCustomer',
            protos_dot_authorization__pb2.AuthorizationRequest.SerializeToString,
            protos_dot_authorization__pb2.AuthorizationResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
